import React, { PureComponent } from 'react'
import {
  withRouter,
  Link
} from 'react-router-dom'

import BScroll from 'better-scroll'
import { Toast } from 'antd-mobile'
import fetch from 'utils/fetch'

import { LoginCon, MainCon, InputCon } from './styled'

class Login extends PureComponent {
  constructor(props) {
    super(props) 
    this.state = {
      user: '',
      pwd: '',
      code: '',
    } 
    this.handleClick = this.handleClick.bind(this)
    this.handleChangeCode = this.handleChangeCode.bind(this) 
    this.handleChangeCode()
  }
  render() {
    return (
      <LoginCon>
        <MainCon id='login-scroll'>
          <em>
            <InputCon> 
              <span>
                <svg viewBox="0 0 1024 1024" width="32" height="32"><path d="M858.5 763.6c-18.9-44.8-46.1-85-80.6-119.5-34.5-34.5-74.7-61.6-119.5-80.6-0.4-0.2-0.8-0.3-1.2-0.5C719.5 518 760 444.7 760 362c0-137-111-248-248-248S264 225 264 362c0 82.7 40.5 156 102.8 201.1-0.4 0.2-0.8 0.3-1.2 0.5-44.8 18.9-85 46-119.5 80.6-34.5 34.5-61.6 74.7-80.6 119.5C146.9 807.5 137 854 136 901.8c-0.1 4.5 3.5 8.2 8 8.2h60c4.4 0 7.9-3.5 8-7.8 2-77.2 33-149.5 87.8-204.3 56.7-56.7 132-87.9 212.2-87.9s155.5 31.2 212.2 87.9C779 752.7 810 825 812 902.2c0.1 4.4 3.6 7.8 8 7.8h60c4.5 0 8.1-3.7 8-8.2-1-47.8-10.9-94.3-29.5-138.2zM512 534c-45.9 0-89.1-17.9-121.6-50.4S340 407.9 340 362c0-45.9 17.9-89.1 50.4-121.6S466.1 190 512 190s89.1 17.9 121.6 50.4S684 316.1 684 362c0 45.9-17.9 89.1-50.4 121.6S557.9 534 512 534z" p-id="14066" fill="#2c2c2c"></path></svg>
              </span>
              <b>
                <input type='text' placeholder='请输入用户名或手机号' autoComplete="off"
                  value={this.state.user}
                  onChange={(e) => {this.setState({ user: e.target.value })}} 
                  onBlur={() => {this.setState({ isuser: true })}} 
                  onFocus={() => {this.setState({ isuser: false })}}
                  onInput={(e) => {if(e.target.value.length>11) e.target.value=e.target.value.slice(0,10)}}
                />
              </b>
              {
                this.state.user && !!!this.state.isuser ? 
                (<i>
                    <svg onClick={() => {this.setState({ user: '' })}} 
                      viewBox="0 0 1024 1024" width="25" height="25"><path d="M512 896C299.936 896 128 724.064 128 512S299.936 128 512 128s384 171.936 384 384-171.936 384-384 384m0-832C264.96 64 64 264.96 64 512s200.96 448 448 448 448-200.96 448-448S759.04 64 512 64" fill="#181818" p-id="2171"></path><path d="M665.376 313.376L512 466.752l-153.376-153.376-45.248 45.248L466.752 512l-153.376 153.376 45.248 45.248L512 557.248l153.376 153.376 45.248-45.248L557.248 512l153.376-153.376z" fill="#181818" p-id="2172"></path></svg>
                </i>) 
                : 
                (<></>)
              }
            </InputCon>
            <InputCon> 
              <span>
                <svg viewBox="0 0 1024 1024" width="32" height="32"><path d="M839.744 317.312C825.28 140.352 684.864 0.96 514.112 0.96S203.008 140.352 188.608 317.248h-6.08c-47.296 0-85.76 40.768-85.76 90.816v507.392c0 50.048 38.464 90.752 85.76 90.752h656.768c47.232 0 85.76-40.704 85.76-90.752V408.064c0-49.92-38.272-90.496-85.312-90.752z m-325.632-250.24c136.256 0 247.552 109.888 261.824 250.24h-523.52c14.336-140.352 125.44-250.24 261.76-250.24z m351.744 848.384c0 15.232-12.16 28.16-26.56 28.16H182.528c-14.464 0-26.624-12.928-26.624-28.16V408.064c0-15.552 11.904-28.16 26.624-28.16h34.432c0.448 0 0.896 0.32 1.344 0.32 0.512 0 0.96-0.32 1.472-0.32h588.8c0.448 0 0.896 0.32 1.344 0.32 0.512 0 0.96-0.32 1.472-0.32h27.904c14.72 0 26.56 12.608 26.56 28.16v507.392z" p-id="2285" fill="#2c2c2c"></path><path d="M513.088 553.6c-32.64 0-59.136 28.096-59.136 62.656a62.08 62.08 0 0 0 39.296 58.432c-0.256 1.408-0.768 2.688-0.768 4.16v62.592c0 12.032 9.152 21.824 20.608 21.824 11.328 0 20.544-9.792 20.544-21.76v-62.72c0-1.408-0.512-2.688-0.768-4.096a62.144 62.144 0 0 0 39.36-58.432c0-34.56-26.56-62.656-59.136-62.656z" p-id="2286" fill="#2c2c2c"></path></svg>
              </span> 
              <b>
                <input type={!!this.state.isshow ? 'text' : 'password'}
                  maxLength='16' placeholder='请输入密码(最多16位)' autoComplete="off"
                  value={this.state.pwd}
                  onChange={(e) => {this.setState({ pwd: e.target.value })}} 
                  onBlur={() => {this.setState({ ispwd: true })}} 
                  onFocus={() => {this.setState({ ispwd: false })}}
                />
              </b>
              {
                this.state.pwd && !!!this.state.ispwd ? 
                (<i onClick={() => {this.setState({ isshow: !this.state.isshow })}}> 
                  {
                    !!this.state.isshow ? 
                    (<svg viewBox="0 0 1027 1024" width="25" height="25"><path d="M512 682.666667c-93.866667 0-170.666667-76.8-170.666667-170.666667s76.8-170.666667 170.666667-170.666667 170.666667 76.8 170.666667 170.666667S605.866667 682.666667 512 682.666667zM512 426.666667c-46.933333 0-85.333333 38.4-85.333333 85.333333s38.4 85.333333 85.333333 85.333333 85.333333-38.4 85.333333-85.333333S558.933333 426.666667 512 426.666667z" p-id="4569"></path><path d="M512 853.333333c-320 0-499.2-307.2-507.733333-320-8.533333-12.8-8.533333-29.866667 0-42.666667C12.8 477.866667 192 170.666667 512 170.666667s499.2 307.2 507.733333 320c8.533333 12.8 8.533333 29.866667 0 42.666667C1011.2 546.133333 832 853.333333 512 853.333333zM93.866667 512c42.666667 64 192 256 418.133333 256 226.133333 0 375.466667-192 418.133333-256-42.666667-64-192-256-418.133333-256C285.866667 256 136.533333 448 93.866667 512z" p-id="4570"></path></svg>                  )
                    :
                    (<svg viewBox="0 0 1024 1024" width="25" height="25"><path d="M941.677 391.71c9.338-14.006 6.225-32.681-6.225-43.575-14.006-10.894-32.681-7.781-43.575 6.225-1.557 1.556-174.3 205.426-379.728 205.426-199.2 0-379.727-205.426-381.283-206.982-10.895-12.45-31.125-14.006-43.576-3.113-12.45 10.894-14.006 31.125-3.113 43.576 3.113 4.668 40.463 46.687 99.6 93.375l-79.37 82.482c-12.45 12.45-10.893 32.681 1.557 43.575 3.113 6.225 10.894 9.338 18.676 9.338 7.78 0 15.562-3.113 21.787-9.338l85.594-88.706c40.463 28.013 88.707 54.47 141.62 73.144l-32.682 110.495c-4.668 17.118 4.67 34.237 21.788 38.906h9.337c14.006 0 26.457-9.338 29.569-23.344l32.681-110.495c24.9 4.669 51.357 7.782 77.813 7.782s52.913-3.113 77.814-7.782l32.68 108.939c3.114 14.006 17.12 23.343 29.57 23.343 3.113 0 6.225 0 7.782-1.556 17.118-4.67 26.456-21.787 21.788-38.906L649.099 595.58c52.914-18.676 101.157-45.132 141.62-73.144l84.038 87.15c6.225 6.225 14.006 9.338 21.787 9.338 7.781 0 15.563-3.113 21.787-9.337 12.45-12.451 12.45-31.125 1.557-43.576l-79.37-82.481c63.808-46.689 101.16-91.82 101.16-91.82z" p-id="5048"></path></svg>)
                  }
                </i>) 
                : 
                (<></>)
              }
            </InputCon>
            <InputCon>
              <span>
                <svg viewBox="0 0 1024 1024" width="32" height="32"><path d="M749.568 867.328 557.056 1003.52c-13.312 10.24-28.672 15.36-45.056 15.36-16.384 0-31.744-5.12-45.056-15.36L274.432 867.328c-123.904-92.16-197.632-238.592-197.632-394.24L76.8 205.824c0-33.792 21.504-63.488 53.248-73.728L480.256 10.24c20.48-6.144 41.984-6.144 62.464 0l350.208 121.856c31.744 10.24 53.248 39.936 53.248 73.728l0 268.288C946.176 628.736 872.448 776.192 749.568 867.328zM875.52 243.712c0-28.672-17.408-53.248-44.032-61.44l-292.864-102.4c-17.408-5.12-35.84-5.12-52.224 0l-292.864 102.4c-26.624 9.216-44.032 33.792-44.032 61.44l0 224.256c0 130.048 61.44 252.928 164.864 329.728l160.768 114.688c11.264 8.192 24.576 12.288 37.888 12.288 13.312 0 26.624-4.096 37.888-12.288l160.768-114.688c103.424-76.8 164.864-200.704 164.864-329.728L876.544 243.712zM491.52 653.312c-11.264 11.264-26.624 13.312-39.936 6.144-5.12-2.048-147.456-141.312-147.456-141.312-13.312-13.312-13.312-35.84 0-50.176 13.312-13.312 35.84-13.312 50.176 0l111.616 111.616 208.896-209.92c13.312-13.312 35.84-13.312 50.176 0 13.312 13.312 13.312 35.84 0 50.176L491.52 653.312z" p-id="3235"></path></svg>
              </span>
              <b>
                <input type="text" autoComplete="off" 
                  maxLength='4'
                  value={this.state.code} 
                  onChange={(e) => {this.setState({code: e.target.value})}}
                />
              </b>
              <div dangerouslySetInnerHTML={{__html:this.state.img}}></div>
              <s onClick={this.handleChangeCode}>看不清，换一张</s>
            </InputCon>
            <>
              <span
                className={( this.state.pwd && this.state.user && this.state.code ) ? 'active' : '' }
                onClick={this.handleClick}
              >登 录</span>
              <span className='cancel' onClick={() => {this.props.history.push('/home')}}>取 消</span>
              <i>
                <Link to='/user/register'>没有账号？注册一个吧</Link>
              </i>
            </>
          </em>
        </MainCon>
      </LoginCon>
    )
  }
  componentDidMount() {
    new BScroll('#login-scroll', {
      click: true
    })
  }

  async handleClick() {
    if(!( this.state.pwd && this.state.user && this.state.code )) return
    let url = '/ws/api/v1/users/login'
    let postData = {
      user: this.state.user,
      pwd: this.state.pwd,
      code: this.state.code
    }
    let { code, msg, data } = await fetch.post({ url, postData })
    if(code === 200) {
      Toast.success('登录成功',1)
      localStorage.token = data.token 
      this.props.history.push('/home')
      return
    }
    Toast.fail(msg,1)
    this.handleChangeCode()

  }

  async handleChangeCode() {
    let { img } = await fetch.get('/ws/api/v1/users/code')
    this.setState({ img })
  }
}

export default withRouter(Login)